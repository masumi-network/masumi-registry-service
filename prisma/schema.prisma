// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model apiKey {
  id                      String       @id @default(cuid())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  apiKey                  String       @unique
  status                  APIKeyStatus
  permission              Permission
  usageLimited            Boolean      @default(false)
  accumulatedUsageCredits Float        @default(0)
  maxUsageCredits         Float?
  usage                   UsageEntry[]

  @@index([apiKey])
}

enum APIKeyStatus {
  ACTIVE
  REVOKED
}

enum Permission {
  USER
  ADMIN
}

model UsageEntry {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usedCredits Float
  note        String?

  apiKey   apiKey? @relation(fields: [apiKeyId], references: [id])
  apiKeyId String?
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String   @unique

  RegistryEntry RegistryEntry[]
}

model RegistryEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String
  api_url             String
  description         String?
  requests_per_hour   Float?
  author_name         String?
  author_contact      String?
  author_organization String?

  privacy_policy      String?
  terms_and_condition String?
  other_legal         String?
  image               String
  tags                Tag[]

  lastUptimeCheck  DateTime
  uptimeCount      Int             @default(0)
  uptimeCheckCount Int             @default(0)
  status           Status
  registry         RegistrySources @relation(fields: [registrySourcesId], references: [id], onDelete: Cascade)

  paymentIdentifier PaymentIdentifier[]
  capability        Capability          @relation(fields: [capabilitiesId], references: [id])
  registrySourcesId String
  identifier        String
  capabilitiesId    String
  prices            Price[]

  //we might not want to enforce this if we want an agent to be able to register again
  //@@unique([registrySourcesId, api_url])
  @@unique([identifier, registrySourcesId])
}

model PaymentIdentifier {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  paymentIdentifier String?
  paymentType       PaymentType
  RegistryEntry     RegistryEntry? @relation(fields: [registryEntryId], references: [id])
  registryEntryId   String?
  sellerVKey        String?

  @@unique([registryEntryId, paymentType])
}

model Price {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  quantity        BigInt
  policyId        String
  assetId         String
  RegistryEntry   RegistryEntry? @relation(fields: [registryEntryId], references: [id])
  registryEntryId String?

  @@unique([quantity, policyId, assetId, registryEntryId])
}

//TODO maybe add a rating system via payment amounts (success and failure)

enum PaymentType {
  WEB3_CARDANO_V1
}

enum Status {
  ONLINE
  OFFLINE
  DEREGISTERED
  INVALID
}

enum RegistryEntryType {
  WEB3_CARDANO_V1
}

model Capability {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  version       String
  description   String?
  RegistryEntry RegistryEntry[]

  @@unique([name, version])
}

model RegistrySources {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  type             RegistryEntryType
  network          Network?
  url              String?
  identifier       String?
  apiKey           String?
  note             String?
  latestPage       Int               @default(1) //# blockfrost starts at page 1
  latestIdentifier String?
  RegistryEntry    RegistryEntry[]

  @@unique([type, identifier])
}

enum Network {
  PREVIEW
  PREPROD
  MAINNET
}

model UpdatedRegistryEntriesLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
